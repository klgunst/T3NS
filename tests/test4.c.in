/*
    T3NS: an implementation of the Three-Legged Tree Tensor Network algorithm
    Copyright (C) 2018-2019 Klaas Gunst <Klaas.Gunst@UGent.be>
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "options.h"
#include "io.h"
#include "macros.h"
#include "network.h"
#include "hamiltonian.h"
#include "hamiltonian_qc.h"
#include "bookkeeper.h"
#include "optimize_network.h"
#include "instructions.h"

static void initialize_program(struct siteTensor **T3NS, 
                               struct rOperators **rops, 
                               struct optScheme * scheme)
{
        static int tstate[4] = {0,6,0,1};
        static enum symmetrygroup sgs[4] = {Z2,U1,SU2, C2v};
        static int nrsyms = 4;

        bookie.nrSyms = nrsyms;
        for (int i = 0; i < bookie.nrSyms; ++i) { 
                bookie.target_state[i] = tstate[i];
                bookie.sgs[i] = sgs[i];
        }

        make_network("${CMAKE_SOURCE_DIR}/tests/networks/lif_T3NS.netw");
        readinteraction("${CMAKE_SOURCE_DIR}/tests/fcidumps/LiF_3.05.FCIDUMP");
        preparebookkeeper(NULL, scheme->regimes[0].svd_sel.minD, 1, 
                          DEFAULT_MINSTATES, NULL);
        init_calculation(T3NS, rops, '${TEST_INIT_OPTION}');
}

static void destroy_T3NS(struct siteTensor **T3NS)
{
        int i;
        for (i = 0; i < netw.sites; ++i)
                destroy_siteTensor(&(*T3NS)[i]);
        safe_free(*T3NS);
}

static void destroy_all_rops(struct rOperators **rops)
{
        int i;
        for (i = 0; i < netw.nr_bonds; ++i)
                destroy_rOperators(&(*rops)[i]);
        safe_free(*rops);
}

static void cleanup_before_exit(struct siteTensor **T3NS, 
                                struct rOperators **rops)
{
        destroy_bookkeeper(&bookie);
        destroy_network(&netw);
        destroy_T3NS(T3NS);
        destroy_all_rops(rops);
        destroy_hamiltonian();
        clear_instructions();
}

int main(int argc, char *argv[])
{
        static struct regime reg[2] = {
                {{100, 100, 1e-4, 'E'}, 2, 1e-6, 4, 2, 1e-4},
                {{100, 100, 1e-4, 'E'}, 2, 1e-6, 100, 10, 1e-6}
        };
        static struct optScheme scheme = {2, reg};
        const double conv_energy = -106.8889308194337247;

        struct siteTensor *T3NS = NULL;
        struct rOperators *rops = NULL;

        initialize_program(&T3NS, &rops, &scheme);
        double energy = execute_optScheme(T3NS, rops, &scheme, NULL);
        cleanup_before_exit(&T3NS, &rops);
        const int OK = fabs(energy - conv_energy) < 1e-5;

        if (OK) {
                printf("\t==> Test passed\n");
                return 0;
        } else {
                printf("\t==> Test failed\n");
                return 1;
        }
}
